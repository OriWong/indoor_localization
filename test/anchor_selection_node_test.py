#!/usr/bin/env python
# -- coding: utf-8 --
# license removed for brevity

import rospy
import sys
import unittest
import numpy as np

import indoor_localization.anchor_selection_node as asn 

PKG = 'indoor_localization'
NAME = 'anchor_selection_node_test'

class TestAnchorSelection(unittest.TestCase):

    ips_dict = {
        'AnchorID': [0, 5, 6, 8, 9, 11, 12, 13, 17, 19],
        'x':        [120, 120, 140, 140, 140, 160, 160, 160, 180, 180],
        'y':        [200, 180, 200, 180, 160, 200, 180, 160, 200, 180],
        'z':        [4.203356, 5.483369, 4.848520, 5.861276, 6.814601, 
                     5.328804, 6.586562, 4.161473, 6.862733, 4.114005],
        'tdoa_of_anchors': [-0.8984051424918285, 5.549387626398598, 4.363982236798634,
                             7.899062598699146, -18.95164370106358, -8.488891630092848,
                             -3.2857739316623658, -13.973034128654382, -6.113682736170411]
    }
    

    last_pos = {
        'Tx': 155.0,
        'Ty': 196.0,
        'Tz': 0.5
    }



##################################################################################################

    def test_ind_of_tag(self):
        tag_x = self.last_pos['Tx']
        tag_y = self.last_pos['Ty']
        tag_z = self.last_pos['Tz']
        position_list = [tag_x, tag_y, tag_z]
        tested = asn.ind_of_tag(position_list)
        test_result = np.array([155.0, 196.0, 0.5])
        np.testing.assert_array_almost_equal(tested, test_result, 4)


    def test_ind_of_anch(self):
        row = len(self.ips_dict['AnchorID'])
        list_x = list(self.ips_dict['x'])
        list_y = list(self.ips_dict['y'])
        list_z = list(self.ips_dict['z'])
        tested = np.array(asn.ind_of_anch(self.ips_dict, row))
        test_result = np.array([
                       [list_x[0], list_y[0], list_z[0]],
                       [list_x[1], list_y[1], list_z[1]],
                       [list_x[2], list_y[2], list_z[2]],
                       [list_x[3], list_y[3], list_z[3]],
                       [list_x[4], list_y[4], list_z[4]],
                       [list_x[5], list_y[5], list_z[5]],
                       [list_x[6], list_y[6], list_z[6]],
                       [list_x[7], list_y[7], list_z[7]],
                       [list_x[8], list_y[8], list_z[8]],
                       [list_x[9], list_y[9], list_z[9]]
                       ], dtype=float)
        np.testing.assert_array_equal(tested, test_result)


    def test_anch_tag_distance(self):
        row = len(self.ips_dict['AnchorID'])
        list_x = list(self.ips_dict['x'])
        list_y = list(self.ips_dict['y'])
        list_z = list(self.ips_dict['z'])
        tag_index = np.array([155.0, 196.0, 0.5])
        anchor_index = np.array([
                       [list_x[0], list_y[0], list_z[0]],
                       [list_x[1], list_y[1], list_z[1]],
                       [list_x[2], list_y[2], list_z[2]],
                       [list_x[3], list_y[3], list_z[3]],
                       [list_x[4], list_y[4], list_z[4]],
                       [list_x[5], list_y[5], list_z[5]],
                       [list_x[6], list_y[6], list_z[6]],
                       [list_x[7], list_y[7], list_z[7]],
                       [list_x[8], list_y[8], list_z[8]],
                       [list_x[9], list_y[9], list_z[9]]
                       ], dtype=float)
        tested = asn.anch_tag_distance(row, tag_index, anchor_index)
        test_result = np.array([
            [35.000, 4.000, 35.22783],
            [35.000, 16.000, 38.48376281],
            [15.000, 4.000, 15.524174696],
            [15.000, 16.000, 21.931712199],
            [15.000, 36.000, 39],
            [5.000, 4.000, 6.403124237],
            [5.000, 16.000, 16.763054614],
            [5.000, 36.000, 36.345563691],
            [25.000, 4.000, 25.317977802],
            [25.000, 16.000, 29.681644159],
        ])
        np.testing.assert_array_almost_equal(tested, test_result, 4)


    def test_ind_of_anch_tag_distance(self):
        row = len(self.ips_dict['AnchorID'])
        list_x = list(self.ips_dict['x'])
        list_y = list(self.ips_dict['y'])
        list_z = list(self.ips_dict['z'])
        tag_anchor_distance_calcu = np.array([
            [35.000, 4.000, 35.22783],          # 120 200
            [35.000, 16.000, 38.48376281],      # 120, 180
            [15.000, 4.000, 15.524174696],      # 140, 200
            [15.000, 16.000, 21.931712199],     # 140, 180, 
            [15.000, 36.000, 39],               # 140, 160
            [5.000, 4.000, 6.403124237],        # 160, 200    
            [5.000, 16.000, 16.763054614],      # 160, 180
            [5.000, 36.000, 36.345563691],      # 160, 160
            [25.000, 4.000, 25.317977802],      # 180, 200
            [25.000, 16.000, 29.681644159],     # 180, 180
        ])
        anchor_index = np.array([
                [list_x[0], list_y[0], list_z[0]],
                [list_x[1], list_y[1], list_z[1]],
                [list_x[2], list_y[2], list_z[2]],
                [list_x[3], list_y[3], list_z[3]],
                [list_x[4], list_y[4], list_z[4]],
                [list_x[5], list_y[5], list_z[5]],
                [list_x[6], list_y[6], list_z[6]],
                [list_x[7], list_y[7], list_z[7]],
                [list_x[8], list_y[8], list_z[8]],
                [list_x[9], list_y[9], list_z[9]]
                ], dtype=float)
        tested = asn.ind_of_anch_tag_distance(row, tag_anchor_distance_calcu, anchor_index)
        test_result = np.array([
            [120, 200, 4.203356, 35.22783],
            [120, 180, 5.483369, 38.48376281],
            [140, 200, 4.848520, 15.524174696],
            [140, 180, 5.861276, 21.931712199],
            [140, 160, 6.814601, 39],
            [160, 200, 5.328804, 6.403124237],
            [160, 180, 6.586562, 16.763054614],
            [160, 160, 4.161473, 36.345563691],
            [180, 200, 6.862733, 25.317977802],
            [180, 180, 4.114005, 29.681644159]
        ])
        np.testing.assert_array_almost_equal(tested, test_result, 4)
        """
        test_result = np.array([
            [120, 180, 5.483369, 38.48376281],
            [120, 200, 4.203356, 35.22783],
            [140, 160, 6.814601, 39],
            [140, 180, 5.861276, 21.931712199],
            [140, 200, 4.848520, 15.524174696],
            [160, 160, 4.161473, 36.345563691],
            [160, 180, 6.586562, 16.763054614],
            [160, 200, 5.328804, 6.403124237],
            [180, 180, 4.114005, 29.681644159],
            [180, 200, 6.862733, 25.317977802]
        ])
        """
    

    def test_sorted_anch(self):
        row = len(self.ips_dict['AnchorID'])
        tag_anchor_index_distance = np.array([
            [120, 200, 4.203356, 35.22783],
            [120, 180, 5.483369, 38.48376281],
            [140, 200, 4.848520, 15.524174696],
            [140, 180, 5.861276, 21.931712199],
            [140, 160, 6.814601, 39],
            [160, 200, 5.328804, 6.403124237],
            [160, 180, 6.586562, 16.763054614],
            [160, 160, 4.161473, 36.345563691],
            [180, 200, 6.862733, 25.317977802],
            [180, 180, 4.114005, 29.681644159]
        ])
        tested = asn.sorted_anch(row, tag_anchor_index_distance)
        test_result = np.array([
            [160, 200, 5.328804, 6.403124237],
            [140, 200, 4.848520, 15.524174696],
            [160, 180, 6.586562, 16.763054614],
            [140, 180, 5.861276, 21.931712199],
            [180, 200, 6.862733, 25.317977802],
            [180, 180, 4.114005, 29.681644159],
            [120, 200, 4.203356, 35.22783],
            [160, 160, 4.161473, 36.345563691],
            [120, 180, 5.483369, 38.48376281],
            [140, 160, 6.814601, 39]
        ])
        np.testing.assert_array_almost_equal(tested, test_result, 4)

    
    def test_listed_anch(self):
        row = len(self.ips_dict['AnchorID'])
        tag_anchor_sorting = np.array([
            [160, 200, 5.328804, 6.403124237],
            [140, 200, 4.848520, 15.524174696],
            [160, 180, 6.586562, 16.763054614],
            [140, 180, 5.861276, 21.931712199],
            [180, 200, 6.862733, 25.317977802],
            [180, 180, 4.114005, 29.681644159],
            [120, 200, 4.203356, 35.22783],
            [160, 160, 4.161473, 36.345563691],
            [120, 180, 5.483369, 38.48376281],
            [140, 160, 6.814601, 39]
        ])
        tested = asn. listed_anch(row, tag_anchor_sorting)
        test_result = np.array([
            [160, 200, 5.328804, 6.403124237,   0],
            [140, 200, 4.848520, 15.524174696,  1],
            [160, 180, 6.586562, 16.763054614,  2],
            [140, 180, 5.861276, 21.931712199,  3],
            [180, 200, 6.862733, 25.317977802,  4],
            [180, 180, 4.114005, 29.681644159,  5],
            [120, 200, 4.203356, 35.22783,      6],
            [160, 160, 4.161473, 36.345563691,  7],
            [120, 180, 5.483369, 38.48376281,   8],
            [140, 160, 6.814601, 39,            9]
        ])
        np.testing.assert_array_almost_equal(tested, test_result, 4)
    

    def test_anch_combination(self):
        row = len(self.ips_dict['AnchorID'])
        tested = asn.anch_combination(row)
        test_result = np.array(
            [
                [0, 1, 2],
                [0, 1, 3],
                [0, 1, 4],
                [0, 1, 5],
                [0, 1, 6],
                [0, 1, 7],
                [0, 1, 8],
                [0, 1, 9],
                [0, 2, 3],
                [0, 2, 4],
                [0, 2, 5],
                [0, 2, 6],
                [0, 2, 7],
                [0, 2, 8],
                [0, 2, 9],
                [0, 3, 4],
                [0, 3, 5],
                [0, 3, 6],
                [0, 3, 7],
                [0, 3, 8],
                [0, 3, 9],
                [0, 4, 5],
                [0, 4, 6],
                [0, 4, 7],
                [0, 4, 8],
                [0, 4, 9],
                [0, 5, 6],
                [0, 5, 7],
                [0, 5, 8],
                [0, 5, 9],
                [0, 6, 7],
                [0, 6, 8],
                [0, 6, 9],
                [0, 7, 8],
                [0, 7, 9],
                [0, 8, 9],
                [1, 2, 3],
                [1, 2, 4],
                [1, 2, 5],
                [1, 2, 6],
                [1, 2, 7],
                [1, 2, 8],
                [1, 2, 9],
                [1, 3, 4],
                [1, 3, 5],
                [1, 3, 6],
                [1, 3, 7],
                [1, 3, 8],
                [1, 3, 9],
                [1, 4, 5],
                [1, 4, 6],
                [1, 4, 7],
                [1, 4, 8],
                [1, 4, 9],
                [1, 5, 6],
                [1, 5, 7],
                [1, 5, 8],
                [1, 5, 9],
                [1, 6, 7],
                [1, 6, 8],
                [1, 6, 9],
                [1, 7, 8],
                [1, 7, 9],
                [1, 8, 9],
                [2, 3, 4],
                [2, 3, 5],
                [2, 3, 6],
                [2, 3, 7],
                [2, 3, 8],
                [2, 3, 9],
                [2, 4, 5],
                [2, 4, 6],
                [2, 4, 7],
                [2, 4, 8],
                [2, 4, 9],
                [2, 5, 6],
                [2, 5, 7],
                [2, 5, 8],
                [2, 5, 9],
                [2, 6, 7],
                [2, 6, 8],
                [2, 6, 9],
                [2, 7, 8],
                [2, 7, 9],
                [2, 8, 9],
                [3, 4, 5],
                [3, 4, 6],
                [3, 4, 7],
                [3, 4, 8],
                [3, 4, 9],
                [3, 5, 6],
                [3, 5, 7],
                [3, 5, 8],
                [3, 5, 9],
                [3, 6, 7],
                [3, 6, 8],
                [3, 6, 9],
                [3, 7, 8],
                [3, 7, 9],
                [3, 8, 9],
                [4, 5, 6],
                [4, 5, 7],
                [4, 5, 8],
                [4, 5, 9],
                [4, 6, 7],
                [4, 6, 8],
                [4, 6, 9],
                [4, 7, 8],
                [4, 7, 9],
                [4, 8, 9],
                [5, 6, 7],
                [5, 6, 8],
                [5, 6, 9],
                [5, 7, 8],
                [5, 7, 9],
                [5, 8, 9],
                [6, 7, 8],
                [6, 7, 9],
                [6, 8, 9],
                [7, 8, 9]
            ]
        )
        np.testing.assert_equal(tested, test_result)


    def test_tmp_anch_combination(self):
        row = len(self.ips_dict['AnchorID'])
        comb_anch = np.array(
            [
                [0, 1, 2],
                [0, 1, 3],
                [0, 1, 4],
                [0, 1, 5],
                [0, 1, 6],
                [0, 1, 7],
                [0, 1, 8],
                [0, 1, 9],
                [0, 2, 3],
                [0, 2, 4],
                [0, 2, 5],
                [0, 2, 6],
                [0, 2, 7],
                [0, 2, 8],
                [0, 2, 9],
                [0, 3, 4],
                [0, 3, 5],
                [0, 3, 6],
                [0, 3, 7],
                [0, 3, 8],
                [0, 3, 9],
                [0, 4, 5],
                [0, 4, 6],
                [0, 4, 7],
                [0, 4, 8],
                [0, 4, 9],
                [0, 5, 6],
                [0, 5, 7],
                [0, 5, 8],
                [0, 5, 9],
                [0, 6, 7],
                [0, 6, 8],
                [0, 6, 9],
                [0, 7, 8],
                [0, 7, 9],
                [0, 8, 9],
                [1, 2, 3],
                [1, 2, 4],
                [1, 2, 5],
                [1, 2, 6],
                [1, 2, 7],
                [1, 2, 8],
                [1, 2, 9],
                [1, 3, 4],
                [1, 3, 5],
                [1, 3, 6],
                [1, 3, 7],
                [1, 3, 8],
                [1, 3, 9],
                [1, 4, 5],
                [1, 4, 6],
                [1, 4, 7],
                [1, 4, 8],
                [1, 4, 9],
                [1, 5, 6],
                [1, 5, 7],
                [1, 5, 8],
                [1, 5, 9],
                [1, 6, 7],
                [1, 6, 8],
                [1, 6, 9],
                [1, 7, 8],
                [1, 7, 9],
                [1, 8, 9],
                [2, 3, 4],
                [2, 3, 5],
                [2, 3, 6],
                [2, 3, 7],
                [2, 3, 8],
                [2, 3, 9],
                [2, 4, 5],
                [2, 4, 6],
                [2, 4, 7],
                [2, 4, 8],
                [2, 4, 9],
                [2, 5, 6],
                [2, 5, 7],
                [2, 5, 8],
                [2, 5, 9],
                [2, 6, 7],
                [2, 6, 8],
                [2, 6, 9],
                [2, 7, 8],
                [2, 7, 9],
                [2, 8, 9],
                [3, 4, 5],
                [3, 4, 6],
                [3, 4, 7],
                [3, 4, 8],
                [3, 4, 9],
                [3, 5, 6],
                [3, 5, 7],
                [3, 5, 8],
                [3, 5, 9],
                [3, 6, 7],
                [3, 6, 8],
                [3, 6, 9],
                [3, 7, 8],
                [3, 7, 9],
                [3, 8, 9],
                [4, 5, 6],
                [4, 5, 7],
                [4, 5, 8],
                [4, 5, 9],
                [4, 6, 7],
                [4, 6, 8],
                [4, 6, 9],
                [4, 7, 8],
                [4, 7, 9],
                [4, 8, 9],
                [5, 6, 7],
                [5, 6, 8],
                [5, 6, 9],
                [5, 7, 8],
                [5, 7, 9],
                [5, 8, 9],
                [6, 7, 8],
                [6, 7, 9],
                [6, 8, 9],
                [7, 8, 9]
            ]
        )
        selected_anchors = np.array([
            [160, 200, 5.328804, 6.403124237,   0],
            [140, 200, 4.848520, 15.524174696,  1],
            [160, 180, 6.586562, 16.763054614,  2],
            [140, 180, 5.861276, 21.931712199,  3],
            [180, 200, 6.862733, 25.317977802,  4],
            [180, 180, 4.114005, 29.681644159,  5],
            [120, 200, 4.203356, 35.22783,      6],
            [160, 160, 4.161473, 36.345563691,  7],
            [120, 180, 5.483369, 38.48376281,   8],
            [140, 160, 6.814601, 39,            9]
        ])
        tested = asn.tmp_anch_combination(row, comb_anch, selected_anchors)
        test_result = np.array(
            [
                [0,	1,	2,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 160,	180,	6.586562, 0],
                [0,	1,	3,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 140,	180,	5.861275, 0],
                [0,	1,	4,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 180,	200,	6.862732, 0],
                [0,	1,	5,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 180,	180,	4.114004, 0],
                [0,	1,	6,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 120,	200,	4.203356, 0],
                [0,	1,	7,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 160,	160,	4.161472, 0],
                [0,	1,	8,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 120,	180,	5.483369, 0],
                [0,	1,	9,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 140,	160,	6.814601, 0],
                [0,	2,	3,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 140,	180,	5.861275, 0],
                [0,	2,	4,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 180,	200,	6.862732, 0],
                [0,	2,	5,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 180,	180,	4.114004, 0],
                [0,	2,	6,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 120,	200,	4.203356, 0],
                [0,	2,	7,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 160,	160,	4.161472, 0],
                [0,	2,	8,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 120,	180,	5.483369, 0],
                [0,	2,	9,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 140,	160,	6.814601, 0],
                [0,	3,	4,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [0,	3,	5,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [0,	3,	6,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [0,	3,	7,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [0,	3,	8,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [0,	3,	9,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [0,	4,	5,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [0,	4,	6,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [0,	4,	7,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [0,	4,	8,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [0,	4,	9,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [0,	5,	6,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [0,	5,	7,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [0,	5,	8,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [0,	5,	9,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [0,	6,	7,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [0,	6,	8,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [0,	6,	9,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [0,	7,	8,	0, 	160,    200,	5.3288, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [0,	7,	9,	0, 	160,    200,	5.3288, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [0,	8,	9,	0, 	160,    200,	5.3288, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [1,	2,	3,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 140,	180,	5.861275, 0],
                [1,	2,	4,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 180,	200,	6.862732, 0],
                [1,	2,	5,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 180,	180,	4.114004, 0],
                [1,	2,	6,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 120,	200,	4.203356, 0],
                [1,	2,	7,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 160,	160,	4.161472, 0],
                [1,	2,	8,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 120,	180,	5.483369, 0],
                [1,	2,	9,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 140,	160,	6.814601, 0],
                [1,	3,	4,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [1,	3,	5,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [1,	3,	6,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [1,	3,	7,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [1,	3,	8,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [1,	3,	9,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [1,	4,	5,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [1,	4,	6,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [1,	4,	7,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [1,	4,	8,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [1,	4,	9,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [1,	5,	6,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [1,	5,	7,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [1,	5,	8,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [1,	5,	9,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [1,	6,	7,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [1,	6,	8,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [1,	6,	9,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [1,	7,	8,	0, 	140,    200,	4.8485, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [1,	7,	9,	0, 	140,    200,	4.8485, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [1,	8,	9,	0, 	140,    200,	4.8485, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [2,	3,	4,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [2,	3,	5,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [2,	3,	6,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [2,	3,	7,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [2,	3,	8,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [2,	3,	9,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [2,	4,	6,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [2,	4,	6,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [2,	4,	7,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [2,	4,	8,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [2,	4,	9,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [2,	5,	6,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [2,	5,	7,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [2,	5,	8,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [2,	5,	9,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [2,	6,	7,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [2,	6,	8,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [2,	6,	9,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [2,	7,	8,	0, 	160,    180,	6.5866, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [2,	7,	9,	0, 	160,    180,	6.5866, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [2,	8,	9,	0, 	160,    180,	6.5866, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [3,	5,	5,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [3,	5,	6,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [3,	5,	7,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [3,	5,	8,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [3,	5,	9,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [3,	6,	6,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [3,	6,	7,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [3,	6,	8,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [3,	6,	9,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [3,	7,	7,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [3,	7,	8,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [3,	7,	9,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [3,	8,	8,	0, 	140,    180,	5.8613, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [3,	8,	9,	0, 	140,    180,	5.8613, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [3,	9,	9,	0, 	140,    180,	5.8613, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [4,	5,	6,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [4,	5,	7,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [4,	5,	8,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [4,	5,	9,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [4,	6,	7,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [4,	6,	8,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [4,	6,	9,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [4,	7,	8,	0, 	180,    200,	6.8627, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [4,	7,	9,	0, 	180,    200,	6.8627, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [4,	8,	9,	0, 	180,    200,	6.8627, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [5,	6,	7,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [5,	6,	8,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [5,	6,	9,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [5,	7,	8,	0, 	180,    180,	4.1140, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [5,	7,	9,	0, 	180,    180,	4.1140, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [5,	8,	9,	0, 	180,    180,	4.1140, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [6,	7,	8,	0, 	120,    200,	4.2034, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [6,	7,	9,	0,	120,	200,	4.2034,	    160,	160,	4.1615,	140,	160,	6.8146,   0],
                [6,	8,	9,	0,	120,	200,	4.2034,	    120,	180,	5.4834,	140,	160,	6.8146,   0],
                [7,	8,	9,	0,	160,	160,	4.1615,	    120,	180,	5.4834,	140,	160,	6.8146,   0]

            ]
        )
        np.testing.assert_array_almost_equal(tested, test_result, 0)
    

    def test_all_combinations(self):
        position_list = [155.0, 196.0, 0.5]
        comb_anch_tmp = np.array(
            [
                [0,	1,	2,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 160,	180,	6.586562, 0],
                [0,	1,	3,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 140,	180,	5.861275, 0],
                [0,	1,	4,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 180,	200,	6.862732, 0],
                [0,	1,	5,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 180,	180,	4.114004, 0],
                [0,	1,	6,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 120,	200,	4.203356, 0],
                [0,	1,	7,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 160,	160,	4.161472, 0],
                [0,	1,	8,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 120,	180,	5.483369, 0],
                [0,	1,	9,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 140,	160,	6.814601, 0],
                [0,	2,	3,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 140,	180,	5.861275, 0],
                [0,	2,	4,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 180,	200,	6.862732, 0],
                [0,	2,	5,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 180,	180,	4.114004, 0],
                [0,	2,	6,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 120,	200,	4.203356, 0],
                [0,	2,	7,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 160,	160,	4.161472, 0],
                [0,	2,	8,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 120,	180,	5.483369, 0],
                [0,	2,	9,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 140,	160,	6.814601, 0],
                [0,	3,	4,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [0,	3,	5,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [0,	3,	6,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [0,	3,	7,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [0,	3,	8,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [0,	3,	9,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [0,	4,	5,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [0,	4,	6,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [0,	4,	7,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [0,	4,	8,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [0,	4,	9,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [0,	5,	6,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [0,	5,	7,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [0,	5,	8,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [0,	5,	9,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [0,	6,	7,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [0,	6,	8,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [0,	6,	9,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [0,	7,	8,	0, 	160,    200,	5.3288, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [0,	7,	9,	0, 	160,    200,	5.3288, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [0,	8,	9,	0, 	160,    200,	5.3288, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [1,	2,	3,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 140,	180,	5.861275, 0],
                [1,	2,	4,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 180,	200,	6.862732, 0],
                [1,	2,	5,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 180,	180,	4.114004, 0],
                [1,	2,	6,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 120,	200,	4.203356, 0],
                [1,	2,	7,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 160,	160,	4.161472, 0],
                [1,	2,	8,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 120,	180,	5.483369, 0],
                [1,	2,	9,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 140,	160,	6.814601, 0],
                [1,	3,	4,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [1,	3,	5,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [1,	3,	6,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [1,	3,	7,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [1,	3,	8,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [1,	3,	9,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [1,	4,	5,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [1,	4,	6,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [1,	4,	7,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [1,	4,	8,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [1,	4,	9,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [1,	5,	6,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [1,	5,	7,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [1,	5,	8,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [1,	5,	9,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [1,	6,	7,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [1,	6,	8,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [1,	6,	9,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [1,	7,	8,	0, 	140,    200,	4.8485, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [1,	7,	9,	0, 	140,    200,	4.8485, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [1,	8,	9,	0, 	140,    200,	4.8485, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [2,	3,	4,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [2,	3,	5,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [2,	3,	6,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [2,	3,	7,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [2,	3,	8,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [2,	3,	9,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [2,	4,	6,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [2,	4,	6,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [2,	4,	7,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [2,	4,	8,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [2,	4,	9,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [2,	5,	6,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [2,	5,	7,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [2,	5,	8,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [2,	5,	9,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [2,	6,	7,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [2,	6,	8,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [2,	6,	9,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [2,	7,	8,	0, 	160,    180,	6.5866, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [2,	7,	9,	0, 	160,    180,	6.5866, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [2,	8,	9,	0, 	160,    180,	6.5866, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [3,	5,	5,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [3,	5,	6,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [3,	5,	7,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [3,	5,	8,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [3,	5,	9,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [3,	6,	6,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [3,	6,	7,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [3,	6,	8,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [3,	6,	9,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [3,	7,	7,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [3,	7,	8,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [3,	7,	9,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [3,	8,	8,	0, 	140,    180,	5.8613, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [3,	8,	9,	0, 	140,    180,	5.8613, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [3,	9,	9,	0, 	140,    180,	5.8613, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [4,	5,	6,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [4,	5,	7,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [4,	5,	8,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [4,	5,	9,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [4,	6,	7,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [4,	6,	8,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [4,	6,	9,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [4,	7,	8,	0, 	180,    200,	6.8627, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [4,	7,	9,	0, 	180,    200,	6.8627, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [4,	8,	9,	0, 	180,    200,	6.8627, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [5,	6,	7,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [5,	6,	8,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [5,	6,	9,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [5,	7,	8,	0, 	180,    180,	4.1140, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [5,	7,	9,	0, 	180,    180,	4.1140, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [5,	8,	9,	0, 	180,    180,	4.1140, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [6,	7,	8,	0, 	120,    200,	4.2034, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [6,	7,	9,	0,	120,	200,	4.2034,	    160,	160,	4.1615,	140,	160,	6.8146,   0],
                [6,	8,	9,	0,	120,	200,	4.2034,	    120,	180,	5.4834,	140,	160,	6.8146,   0],
                [7,	8,	9,	0,	160,	160,	4.1615,	    120,	180,	5.4834,	140,	160,	6.8146,   0]

            ]
        )
        tested = asn.all_combinations(position_list, comb_anch_tmp)
        test_result = np.array(
            [0.0615985240956481,
             0.0755278692622397,
             'inf',
             0.0906468722218315,
             'inf',
             0.0576481035612150,
             0.118097832483058,
             0.0616508236793112,
             0.0827039281886618,
             0.0660463361741802,
             0.0827039281886618,
             0.0623782349499827,
             'inf',
             0.0671602523776219,
             0.129560023902244,
             0.0901024815761657,
             0.0558308153260946,
             0.0727462110823498,
             0.0727462110823499,
             0.159743254884436,
             0.159743254884436,
             0.118060750128726,
             'inf',
             0.0862568529859302,
             0.198888398525328,
             0.0978524359224338,
             0.101495381640677,
             0.0951058057651224,
             0.0740181776582730,
             0.0721078044831008,
             0.0581146988775125,
             0.124391993908157,
             0.0634457785249022,
             0.0653342641830980,
             0.128242602918494,
             0.0911550860253352,
             0.0751272273179829,
             0.0661438606461973,
             0.134416448234600,
             0.125685401502809,
             0.134416448234600,
             0.0639620209620384,
             0.0661438606461974,
             0.0902811532605790,
             0.0935982481746206,
             0.100271240188883,
             0.173107389536710,
             0.111777025001596,
             'inf',
             0.0946226505835292,
             'inf',
             0.0535995008606919,
             0.0983514632389458,
             0.0541559801468351,
             0.184696682171827,
             0.0735841797831203,
             0.0669209726118692,
             0.0545522449067303,
             0.142803022748627,
             0.164451601887282,
             0.124200642738285,
             0.0656197163100553,
             0.116901057881806,
             0.126390267890328,
             0.159641864625151,
             'inf',
             0.176356596175917,
             0.105781861921399,
             'inf',
             0.114288423164720,
             0.0987979813929398,
             0.0824815716172848,
             0.148945367161375,
             0.120082977994962,
             'inf',
             0.273339581610067,
             0.122241177084292,
             'inf',
             0.181636260333079,
             0.0963073689306489,
             0.114147075204808,
             0.0666964525010979,
             0.130052730611788,
             0.170788011881237,
             0.0943698313868470,
             0.0888797571350769,
             0.0803546975056880,
             0.0651494435875258,
             0.237559966255753,
             0.107794728785590,
             0.129655067618261,
             0.0827919875803034,
             'inf',
             0.0916799775280730,
             'inf',
             0.131267042223635,
             0.192724889615585,
             0.194733460712920,
             0.134198636423894,
             0.157039272749473,
             0.126986784416138,
             0.238674601319149,
             0.127891766165732,
             0.160564723679238,
             0.0563979757239257,
             0.119808118716213,
             0.0603922828113410,
             0.0808922066628258,
             0.166512476670147,
             0.0904687516119369,
             0.0767930120967408,
             0.114992143221601,
             0.0647829289821586,
             0.133723236066168,
             0.271822785009573,
             0.100548041943923,
             0.136287092046481,
             0.139112936502602,
             0.313102536826369,
             0.201910956905639], dtype=float
            )
        np.testing.assert_array_almost_equal(tested[:,13], test_result, 4)


    def test_find_min_pdop(self):
        comb_anch_last_col_13 = np.array(
            [0.0615985240956481,
                0.0755278692622397,
                'inf',
                0.0906468722218315,
                'inf',
                0.0576481035612150,
                0.118097832483058,
                0.0616508236793112,
                0.0827039281886618,
                0.0660463361741802,
                0.0827039281886618,
                0.0623782349499827,
                'inf',
                0.0671602523776219,
                0.129560023902244,
                0.0901024815761657,
                0.0558308153260946,
                0.0727462110823498,
                0.0727462110823499,
                0.159743254884436,
                0.159743254884436,
                0.118060750128726,
                'inf',
                0.0862568529859302,
                0.198888398525328,
                0.0978524359224338,
                0.101495381640677,
                0.0951058057651224,
                0.0740181776582730,
                0.0721078044831008,
                0.0581146988775125,
                0.124391993908157,
                0.0634457785249022,
                0.0653342641830980,
                0.128242602918494,
                0.0911550860253352,
                0.0751272273179829,
                0.0661438606461973,
                0.134416448234600,
                0.125685401502809,
                0.134416448234600,
                0.0639620209620384,
                0.0661438606461974,
                0.0902811532605790,
                0.0935982481746206,
                0.100271240188883,
                0.173107389536710,
                0.111777025001596,
                'inf',
                0.0946226505835292,
                'inf',
                0.0535995008606919,
                0.0983514632389458,
                0.0541559801468351,
                0.184696682171827,
                0.0735841797831203,
                0.0669209726118692,
                0.0545522449067303,
                0.142803022748627,
                0.164451601887282,
                0.124200642738285,
                0.0656197163100553,
                0.116901057881806,
                0.126390267890328,
                0.159641864625151,
                'inf',
                0.176356596175917,
                0.105781861921399,
                'inf',
                0.114288423164720,
                0.0987979813929398,
                0.0824815716172848,
                0.148945367161375,
                0.120082977994962,
                'inf',
                0.273339581610067,
                0.122241177084292,
                'inf',
                0.181636260333079,
                0.0963073689306489,
                0.114147075204808,
                0.0666964525010979,
                0.130052730611788,
                0.170788011881237,
                0.0943698313868470,
                0.0888797571350769,
                0.0803546975056880,
                0.0651494435875258,
                0.237559966255753,
                0.107794728785590,
                0.129655067618261,
                0.0827919875803034,
                'inf',
                0.0916799775280730,
                'inf',
                0.131267042223635,
                0.192724889615585,
                0.194733460712920,
                0.134198636423894,
                0.157039272749473,
                0.126986784416138,
                0.238674601319149,
                0.127891766165732,
                0.160564723679238,
                0.0563979757239257,
                0.119808118716213,
                0.0603922828113410,
                0.0808922066628258,
                0.166512476670147,
                0.0904687516119369,
                0.0767930120967408,
                0.114992143221601,
                0.0647829289821586,
                0.133723236066168,
                0.271822785009573,
                0.100548041943923,
                0.136287092046481,
                0.139112936502602,
                0.313102536826369,
                0.201910956905639], dtype=float
            )
        temp_comb_anch_last_arr = np.zeros((len(comb_anch_last_col_13), 14), dtype=float)
        temp_comb_anch_last_arr[:,13] = comb_anch_last_col_13
        tested = asn.find_min_pdop(temp_comb_anch_last_arr)
        test_result = 0.0536
        self.assertAlmostEqual(tested, test_result, 4)
    

    def test_select_anchors_main(self):
        min_pdop = 0.0536
        comb_anch_tmp = np.array(
            [
                [0,	1,	2,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 160,	180,	6.586562, 0],
                [0,	1,	3,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 140,	180,	5.861275, 0],
                [0,	1,	4,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 180,	200,	6.862732, 0],
                [0,	1,	5,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 180,	180,	4.114004, 0],
                [0,	1,	6,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 120,	200,	4.203356, 0],
                [0,	1,	7,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 160,	160,	4.161472, 0],
                [0,	1,	8,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 120,	180,	5.483369, 0],
                [0,	1,	9,	0, 	160,    200,	5.3288, 	140,    200,	4.8485, 140,	160,	6.814601, 0],
                [0,	2,	3,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 140,	180,	5.861275, 0],
                [0,	2,	4,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 180,	200,	6.862732, 0],
                [0,	2,	5,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 180,	180,	4.114004, 0],
                [0,	2,	6,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 120,	200,	4.203356, 0],
                [0,	2,	7,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 160,	160,	4.161472, 0],
                [0,	2,	8,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 120,	180,	5.483369, 0],
                [0,	2,	9,	0, 	160,    200,	5.3288, 	160,    180,	6.5866, 140,	160,	6.814601, 0],
                [0,	3,	4,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [0,	3,	5,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [0,	3,	6,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [0,	3,	7,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [0,	3,	8,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [0,	3,	9,	0, 	160,    200,	5.3288, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [0,	4,	5,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [0,	4,	6,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [0,	4,	7,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [0,	4,	8,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [0,	4,	9,	0, 	160,    200,	5.3288, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [0,	5,	6,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [0,	5,	7,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [0,	5,	8,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [0,	5,	9,	0, 	160,    200,	5.3288, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [0,	6,	7,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [0,	6,	8,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [0,	6,	9,	0, 	160,    200,	5.3288, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [0,	7,	8,	0, 	160,    200,	5.3288, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [0,	7,	9,	0, 	160,    200,	5.3288, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [0,	8,	9,	0, 	160,    200,	5.3288, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [1,	2,	3,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 140,	180,	5.861275, 0],
                [1,	2,	4,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 180,	200,	6.862732, 0],
                [1,	2,	5,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 180,	180,	4.114004, 0],
                [1,	2,	6,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 120,	200,	4.203356, 0],
                [1,	2,	7,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 160,	160,	4.161472, 0],
                [1,	2,	8,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 120,	180,	5.483369, 0],
                [1,	2,	9,	0, 	140,    200,	4.8485, 	160,    180,	6.5866, 140,	160,	6.814601, 0],
                [1,	3,	4,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [1,	3,	5,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [1,	3,	6,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [1,	3,	7,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [1,	3,	8,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [1,	3,	9,	0, 	140,    200,	4.8485, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [1,	4,	5,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [1,	4,	6,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [1,	4,	7,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [1,	4,	8,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [1,	4,	9,	0, 	140,    200,	4.8485, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [1,	5,	6,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [1,	5,	7,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [1,	5,	8,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [1,	5,	9,	0, 	140,    200,	4.8485, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [1,	6,	7,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [1,	6,	8,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [1,	6,	9,	0, 	140,    200,	4.8485, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [1,	7,	8,	0, 	140,    200,	4.8485, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [1,	7,	9,	0, 	140,    200,	4.8485, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [1,	8,	9,	0, 	140,    200,	4.8485, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [2,	3,	4,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 180,	200,	6.862732, 0],
                [2,	3,	5,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 180,	180,	4.114004, 0],
                [2,	3,	6,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 120,	200,	4.203356, 0],
                [2,	3,	7,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 160,	160,	4.161472, 0],
                [2,	3,	8,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 120,	180,	5.483369, 0],
                [2,	3,	9,	0, 	160,    180,	6.5866, 	140,    180,	5.8613, 140,	160,	6.814601, 0],
                [2,	4,	6,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [2,	4,	6,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [2,	4,	7,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [2,	4,	8,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [2,	4,	9,	0, 	160,    180,	6.5866, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [2,	5,	6,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [2,	5,	7,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [2,	5,	8,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [2,	5,	9,	0, 	160,    180,	6.5866, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [2,	6,	7,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [2,	6,	8,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [2,	6,	9,	0, 	160,    180,	6.5866, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [2,	7,	8,	0, 	160,    180,	6.5866, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [2,	7,	9,	0, 	160,    180,	6.5866, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [2,	8,	9,	0, 	160,    180,	6.5866, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [3,	5,	5,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 180,	180,	4.114004, 0],
                [3,	5,	6,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 120,	200,	4.203356, 0],
                [3,	5,	7,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 160,	160,	4.161472, 0],
                [3,	5,	8,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 120,	180,	5.483369, 0],
                [3,	5,	9,	0, 	140,    180,	5.8613, 	180,    200,	6.8627, 140,	160,	6.814601, 0],
                [3,	6,	6,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [3,	6,	7,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [3,	6,	8,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [3,	6,	9,	0, 	140,    180,	5.8613, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [3,	7,	7,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [3,	7,	8,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [3,	7,	9,	0, 	140,    180,	5.8613, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [3,	8,	8,	0, 	140,    180,	5.8613, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [3,	8,	9,	0, 	140,    180,	5.8613, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [3,	9,	9,	0, 	140,    180,	5.8613, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [4,	5,	6,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 120,	200,	4.203356, 0],
                [4,	5,	7,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 160,	160,	4.161472, 0],
                [4,	5,	8,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 120,	180,	5.483369, 0],
                [4,	5,	9,	0, 	180,    200,	6.8627, 	180,    180,	4.1140, 140,	160,	6.814601, 0],
                [4,	6,	7,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [4,	6,	8,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [4,	6,	9,	0, 	180,    200,	6.8627, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [4,	7,	8,	0, 	180,    200,	6.8627, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [4,	7,	9,	0, 	180,    200,	6.8627, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [4,	8,	9,	0, 	180,    200,	6.8627, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [5,	6,	7,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 160,	160,	4.161472, 0],
                [5,	6,	8,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 120,	180,	5.483369, 0],
                [5,	6,	9,	0, 	180,    180,	4.1140, 	120,    200,	4.2034, 140,	160,	6.814601, 0],
                [5,	7,	8,	0, 	180,    180,	4.1140, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [5,	7,	9,	0, 	180,    180,	4.1140, 	160,    160,	4.1615, 140,	160,	6.814601, 0],
                [5,	8,	9,	0, 	180,    180,	4.1140, 	120,    180,	5.4834, 140,	160,	6.814601, 0],
                [6,	7,	8,	0, 	120,    200,	4.2034, 	160,    160,	4.1615, 120,	180,	5.483369, 0],
                [6,	7,	9,	0,	120,	200,	4.2034,	    160,	160,	4.1615,	140,	160,	6.8146,   0],
                [6,	8,	9,	0,	120,	200,	4.2034,	    120,	180,	5.4834,	140,	160,	6.8146,   0],
                [7,	8,	9,	0,	160,	160,	4.1615,	    120,	180,	5.4834,	140,	160,	6.8146,   0]

            ]
        )
        comb_anch_last_col_13 = np.array(
            [0.0615985240956481,
                0.0755278692622397,
                'inf',
                0.0906468722218315,
                'inf',
                0.0576481035612150,
                0.118097832483058,
                0.0616508236793112,
                0.0827039281886618,
                0.0660463361741802,
                0.0827039281886618,
                0.0623782349499827,
                'inf',
                0.0671602523776219,
                0.129560023902244,
                0.0901024815761657,
                0.0558308153260946,
                0.0727462110823498,
                0.0727462110823499,
                0.159743254884436,
                0.159743254884436,
                0.118060750128726,
                'inf',
                0.0862568529859302,
                0.198888398525328,
                0.0978524359224338,
                0.101495381640677,
                0.0951058057651224,
                0.0740181776582730,
                0.0721078044831008,
                0.0581146988775125,
                0.124391993908157,
                0.0634457785249022,
                0.0653342641830980,
                0.128242602918494,
                0.0911550860253352,
                0.0751272273179829,
                0.0661438606461973,
                0.134416448234600,
                0.125685401502809,
                0.134416448234600,
                0.0639620209620384,
                0.0661438606461974,
                0.0902811532605790,
                0.0935982481746206,
                0.100271240188883,
                0.173107389536710,
                0.111777025001596,
                'inf',
                0.0946226505835292,
                'inf',
                0.0535995008606919,
                0.0983514632389458,
                0.0541559801468351,
                0.184696682171827,
                0.0735841797831203,
                0.0669209726118692,
                0.0545522449067303,
                0.142803022748627,
                0.164451601887282,
                0.124200642738285,
                0.0656197163100553,
                0.116901057881806,
                0.126390267890328,
                0.159641864625151,
                'inf',
                0.176356596175917,
                0.105781861921399,
                'inf',
                0.114288423164720,
                0.0987979813929398,
                0.0824815716172848,
                0.148945367161375,
                0.120082977994962,
                'inf',
                0.273339581610067,
                0.122241177084292,
                'inf',
                0.181636260333079,
                0.0963073689306489,
                0.114147075204808,
                0.0666964525010979,
                0.130052730611788,
                0.170788011881237,
                0.0943698313868470,
                0.0888797571350769,
                0.0803546975056880,
                0.0651494435875258,
                0.237559966255753,
                0.107794728785590,
                0.129655067618261,
                0.0827919875803034,
                'inf',
                0.0916799775280730,
                'inf',
                0.131267042223635,
                0.192724889615585,
                0.194733460712920,
                0.134198636423894,
                0.157039272749473,
                0.126986784416138,
                0.238674601319149,
                0.127891766165732,
                0.160564723679238,
                0.0563979757239257,
                0.119808118716213,
                0.0603922828113410,
                0.0808922066628258,
                0.166512476670147,
                0.0904687516119369,
                0.0767930120967408,
                0.114992143221601,
                0.0647829289821586,
                0.133723236066168,
                0.271822785009573,
                0.100548041943923,
                0.136287092046481,
                0.139112936502602,
                0.313102536826369,
                0.201910956905639], dtype=float
            )
        comb_anch_tmp[:,13] = comb_anch_last_col_13
        comb_anch_last = comb_anch_tmp

        tested = asn.select_anchors_main(self.ips_dict, min_pdop, comb_anch_last)
        test_result = {
            6: [140, 200, 4.848520],
            17: [180, 200, 6.862733],
            13: [160, 160, 4.161473]
        }
        self.assertDictEqual(tested, test_result)


    def test_find_sel_anch_index(self):
        selected_anchors_dict = {
            6: [140, 200, 4.848520],
            17: [180, 200, 6.862733],
            13: [160, 160, 4.161473]
        }
        tested = asn.find_sel_anch_index(self.ips_dict, selected_anchors_dict)
        test_result = [8, 7, 2]
        self.assertListEqual(tested, test_result)
    

    def test_subtract_one_from_each_index(self):
        sel_anch_index_list = [8, 7, 2]
        tested = asn.subtract_one_from_each_index(sel_anch_index_list)[0]
        test_result = [7, 6, 1]
        self.assertListEqual(tested, test_result)


    def test_find_the_ddoa_values(self):
        new_index_list = [7, 6, 1]
        tested = asn.find_the_ddoa_values(self.ips_dict, new_index_list)
        test_result = [-13.973034128654382, -3.2857739316623658, 5.549387626398598]
        self.assertListEqual(tested, test_result)
    

    def test_detect_finalised_tdoa_values(self):
        min_ind = 2
        sel_anch_tdoa_list = [-13.973034128654382, -3.2857739316623658, 5.549387626398598]
        tested = asn.detect_finalised_tdoa_values(min_ind, sel_anch_tdoa_list)
        test_result = [-19.522421755, -8.835161558]
        self.assertAlmostEqual(tested[0], test_result[0], 4)
        self.assertAlmostEqual(tested[1], test_result[1], 4)


if __name__ == '__main__':
	import rosunit
	rosunit.unitrun(PKG, NAME, TestAnchorSelection, sysargs = None, coverage_packages = [str(PKG)])